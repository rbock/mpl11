require_relative '../compiler'
require_relative '../utility'
Dir.chdir(File.dirname(File.dirname(__FILE__)))


task :default => ['foldl.wide', 'foldl.deep']

implementations = Dir['foldl/*.rb'].map { |file|
  File.remove_ext(File.basename(file))
}

%w{deep wide}.product(Compiler.list.map(&:id), %w{strict lazy}) do |kind, cc, strictness|
  foldl = "foldl.#{kind}/#{cc}/#{strictness}"
  datasets = -> (re) {
    implementations.grep(re).map { |impl| "dataset/#{foldl}/#{impl}" }
  }


  plot("plot/#{foldl}/variadic" => datasets[/mpl11_variadic/])
  task "foldl.#{kind}" => ["plot/#{foldl}/variadic"]


  plot("plot/#{foldl}/until" => datasets[/mpl11_until/])
  task "foldl.#{kind}" => ["plot/#{foldl}/until"]


  plot("plot/#{foldl}/categories" => datasets[/aliased|bounded/])
  task "foldl.#{kind}" => ["plot/#{foldl}/categories"]


  plot("plot/#{foldl}/mpl" => datasets[/list|vector|cons/])
  task "foldl.#{kind}" => ["plot/#{foldl}/mpl"]
end


dataset(1..800, /dataset\/foldl\.deep\/(?<compiler>.+)\/(?<strictness>strict|lazy)\/(?<impl>.+)/ => [
  'foldl/main.cpp', proc { |_, match| "foldl/#{match[:impl]}.rb" }
]) do |n, match|
  require_relative "#{match[:impl]}.rb"
  strictness = match[:strictness]
  sequences = [(1..n).map(&:to_s).map { |i| "x<#{i}>" }]
  binding
end

dataset(1..300, /dataset\/foldl\.wide\/(?<compiler>.+)\/(?<strictness>strict|lazy)\/(?<impl>.+)/ => [
  'foldl/main.cpp', proc { |_, match| "foldl/#{match[:impl]}.rb" }
]) do |n, match|
  require_relative "#{match[:impl]}.rb"
  sequences = (1..n).map { |k|
    (1..10).map(&:to_s).map { |i| "x<#{k}, #{i}>" }
  }
  strictness = match[:strictness]
  binding
end
