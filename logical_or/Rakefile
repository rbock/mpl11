require 'rake/clean'
require_relative '../compiler'
require_relative '../utility'


##############################################################################
# Setup
##############################################################################
VARIANTS = %w{single}
COMPILERS = Compiler.list.map(&:id)
STRICTNESSES = %w{strict}

Dir['*.hpp'].each do |file|
  Implementation.new(File.remove_ext(file)) do |impl|
    impl.headers = proc { file }
    impl.go = -> (xs) { "or_<#{xs.join(', ')}>" }
  end
end

def DATASETS(pattern = '*')
  VARIANTS.product(COMPILERS, STRICTNESSES, Implementation.list.map(&:id))
          .map { |args| File.join(*args.map(&:to_s)) }
          .select { |path| File.fnmatch?(pattern, path) }
          .map(&'dataset/'.method(:+))
end

CLEAN.include('dataset/*')
CLOBBER.include('plot/*')


##############################################################################
# Plots
##############################################################################
{
  'all'      => '*'
}.each do |name, pattern|
  plot(/^plot\/.+\/#{name}$/ => [
    proc { |name|
      _, variant, cc, strictness, _ = name.split('/')
      DATASETS("#{variant}/#{cc}/#{strictness}/#{pattern}")
    }
  ])

  task :default => [name]
  task name => VARIANTS.product(COMPILERS, STRICTNESSES).map { |*mid|
    "plot/#{mid.join('/')}/#{name}"
  }
end


##############################################################################
# Datasets
##############################################################################
quick_dataset(:single, 1..800) do |n|
  [(n-1).times.map { 'false_' } << 'true_']
end
